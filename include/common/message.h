#pragma once

#include "common/enum_str.h"
#include "common/result.hpp"

enum message_block {
  MESSAGE_BLOCK_INVALID = 0,
  MESSAGE_BLOCK_CCB,
  MESSAGE_BLOCK_DSB,
  MESSAGE_BLOCK_RLB,
  MESSAGE_BLOCK_CLI,
  MESSAGE_BLOCK_PNB,
  MESSAGE_BLOCK_END,
};

enum message_type {
  REQUEST_MIN,

  REQUEST_HELLO,
  RESPONSE_HELLO,

  CLOSE_REQ,
  CLOSE_RESP,

  // the following message are processed by RLB
  RLB_MESSAGE_BEGIN,
  RAFT_APPEND_ENTRIES_REQ,
  RAFT_APPEND_ENTRIES_RESP,
  RAFT_REQ_VOTE_REQ,
  RAFT_REQ_VOTE_RESP,
  RAFT_PRE_VOTE_REQ,
  RAFT_PRE_VOTE_RESP,
  RAFT_TRANSFER_LEADER,
  RAFT_TRANSFER_NOTIFY,

  C2R_APPEND_LOG_REQ,
  C2R_REPLAY_LOG_RESP,
  D2R_WRITE_BATCH_RESP,
  C2R_REGISTER_REQ,
  D2R_REGISTER_REQ,
  C2R_REPORT_STATUS_RESP,
  RLB_MESSAGE_END,

  // the following message are processed by CCB
  CCB_MESSAGE_BEGIN,
  R2C_REGISTER_RESP,
  COMMIT_LOG_ENTRIES,
  D2C_READ_DATA_RESP,

  R2C_REPORT_STATUS_REQ,

  CCB_BORADCAST_STATUS_REQ,
  CCB_BORADCAST_STATUS_RESP,
  CLIENT_TX_REQ,
  CLIENT_CCB_STATE_REQ,
  CCB_HANDLE_WARM_UP_REQ,
  CCB_HANDLE_WARM_UP_RESP,
  TX_TM_COMMIT,
  TX_TM_ABORT,
  TX_TM_END,
  TX_RM_PREPARE,
  TX_RM_ACK,
  TX_VICTIM,
  TX_TM_REQUEST,
  LEAD_STATUS_REQUEST,
  LEAD_STATUS_RESPONSE,

  CALVIN_EPOCH,
  CALVIN_PART_COMMIT,
  CALVIN_EPOCH_ACK,

  RM_ENABLE_VIOLATE,
  TM_ENABLE_VIOLATE,

  DL_DEPENDENCY,

  CCB_ERROR_CONSISTENCY,
  CCB_MESSAGE_END,

  // the following message are processed by DSB
  DSB_MESSAGE_BEGIN,
  C2D_READ_DATA_REQ,
  R2D_REGISTER_RESP,
  R2D_REPLAY_TO_DSB_REQ,
  CLIENT_LOAD_DATA_REQ,
  DSB_HANDLE_WARM_UP_REQ,
  DSB_ERROR_CONSISTENCY, _ERROR_CONSISTENCY,
  DSB_MESSAGE_END,

  CLI_MESSAGE_BEGIN,
  CLIENT_TX_RESP,
  CLIENT_CCB_STATE_RESP,
  CLIENT_HANDLE_WARM_UP_RESP,
  CLIENT_LOAD_DATA_RESP,
  CLIENT_SYNC,
  CLIENT_BENCH_STOP,
  CLIENT_SYNC_CLOSE,
  CLI_MESSAGE_END,

  MESSAGE_END,
};

template<>
enum_strings<message_type>::e2s_t enum_strings<message_type>::enum2str;
